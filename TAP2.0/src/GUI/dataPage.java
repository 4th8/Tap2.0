/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Scanner;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import tap2.pkg0.dbQuery;

/**
 *
 * @author marc
 */
public class dataPage extends javax.swing.JFrame {
    static class InvalidFilenameException extends Exception{};
    static class NotCSVException extends Exception{};
    private dbQuery query;
    /**
     * Creates new form dataPage
     * @param query
     */
    public dataPage(dbQuery query) {
        this.query = query;
        updateResults();
        initComponents();
    }
    /*
    This should allow the user to sort the results shown on the screen.
    It will 
    */
    private void updateResults(){
        try {
            
            
            /*
            import praram here
            */
            /*
            Code snippet adaped from http://technojeeves.com/index.php/22-resultset-to-tablemodel
            
            */
            ResultSet set = query.getAllTemp();// use the select query
            ResultSetMetaData metaData = set.getMetaData();
            int numberOfColumns = metaData.getColumnCount();
            Vector columnNames = new Vector();

            // Get the column names
            for (int column = 0; column < numberOfColumns; column++) {
                columnNames.addElement(metaData.getColumnLabel(column + 1));
            }

            // Get all rows.
            Vector rows = new Vector();

            while (set.next()) {
                Vector newRow = new Vector();

                for (int i = 1; i <= numberOfColumns; i++) {
                    newRow.addElement(set.getObject(i));
                }

                rows.addElement(newRow);
            }
            /*
            End Snippet
            */
            results = new DefaultTableModel(rows, columnNames);
        } catch (SQLException e) {
        }
        try{
        rawTable.setModel(results);
        }catch(NullPointerException ex){
            ;
        }
        
    }
    //Location GUI=new Location();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tapPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("tapPU").createEntityManager();
        locationQuery = java.beans.Beans.isDesignTime() ? null : tapPUEntityManager.createQuery("SELECT l FROM Location l");
        locationList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : locationQuery.getResultList();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        rawPanel2 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        importButton = new javax.swing.JButton();
        statusField = new javax.swing.JTextField();
        exportButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        rawTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        averageTextField = new javax.swing.JTextField();
        min = new javax.swing.JLabel();
        max = new javax.swing.JLabel();
        std = new javax.swing.JLabel();
        q1 = new javax.swing.JLabel();
        q2 = new javax.swing.JLabel();
        q3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel22.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel22.setText("Raw Data");

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        statusField.setEditable(false);
        statusField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusFieldActionPerformed(evt);
            }
        });

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        rawTable.setAutoCreateRowSorter(true);
        rawTable.setModel(results);
        jScrollPane1.setViewportView(rawTable);
        rawTable.getAccessibleContext().setAccessibleParent(rawTable);

        jButton2.setText("Add Location/Sensor");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("CLEAR DATABASE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("Average:");

        averageTextField.setEditable(false);
        averageTextField.setActionCommand("<Not Set>");
        averageTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        averageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                averageTextFieldActionPerformed(evt);
            }
        });
        averageTextField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                averageTextFieldPropertyChange(evt);
            }
        });

        min.setText("Min:");

        max.setText("Max:");

        std.setText("STD:");

        q1.setText("Q1:");

        q2.setText("Q2:");

        q3.setText("Q3:");

        jTextField2.setEditable(false);

        jTextField3.setEditable(false);

        jTextField5.setEditable(false);

        jTextField6.setEditable(false);

        jTextField7.setEditable(false);

        javax.swing.GroupLayout rawPanel2Layout = new javax.swing.GroupLayout(rawPanel2);
        rawPanel2.setLayout(rawPanel2Layout);
        rawPanel2Layout.setHorizontalGroup(
            rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rawPanel2Layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 826, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rawPanel2Layout.createSequentialGroup()
                        .addComponent(importButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exportButton)
                        .addGap(18, 18, 18)
                        .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(rawPanel2Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(max)
                            .addComponent(min)
                            .addComponent(std)
                            .addComponent(q1)
                            .addComponent(q2)
                            .addComponent(q3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2)
                            .addComponent(jTextField3)
                            .addComponent(jTextField4)
                            .addComponent(jTextField5)
                            .addComponent(jTextField6)
                            .addComponent(jTextField7)))
                    .addGroup(rawPanel2Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(averageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
            .addGroup(rawPanel2Layout.createSequentialGroup()
                .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rawPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(297, 297, 297)
                        .addComponent(jLabel22))
                    .addGroup(rawPanel2Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jButton3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rawPanel2Layout.setVerticalGroup(
            rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rawPanel2Layout.createSequentialGroup()
                .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rawPanel2Layout.createSequentialGroup()
                        .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(rawPanel2Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel22))
                            .addComponent(jButton2))
                        .addGap(51, 51, 51)
                        .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(averageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(min)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(max)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5))
                    .addGroup(rawPanel2Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jButton3)
                        .addGap(35, 35, 35)
                        .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(importButton)
                            .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exportButton))
                        .addGap(18, 18, Short.MAX_VALUE)))
                .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(std)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(rawPanel2Layout.createSequentialGroup()
                        .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(q1)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(q2)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(rawPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(q3)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Raw Data", rawPanel2);
        jTabbedPane2.addTab("Graph", jTabbedPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1149, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //private static String fileLocation;
    private void statusFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusFieldActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        try {
            importFile();
        } catch (InvalidFilenameException ex) {
            JPanel panel = new JPanel();
            JOptionPane.showMessageDialog(panel, "Name must include serial number. \n Ex: 2015_<<serialNumber>>_temp.csv", "Invalid Filename", JOptionPane.ERROR_MESSAGE);            
        }catch (NotCSVException ex) {
            JPanel panel = new JPanel();
            JOptionPane.showMessageDialog(panel, "File must be a .csv format.", "Invalid Filetype", JOptionPane.ERROR_MESSAGE);            
        }
    }//GEN-LAST:event_importButtonActionPerformed
    private void importFile()throws InvalidFilenameException, NotCSVException{
        JFileChooser chooser = new JFileChooser();
        String serialNumber = "";
        String locationID = "";
        int chooserValue = chooser.showOpenDialog(this);
        if (chooserValue == JFileChooser.APPROVE_OPTION) {
            try {
                Scanner fin;
                fin = new Scanner(chooser.getSelectedFile());
                String filename = chooser.getSelectedFile().getName();
                if(!filename.endsWith(".csv")){
                    throw new NotCSVException();
                }
                Pattern pattern = Pattern.compile("([0-9]{6})");
                Matcher matcher = pattern.matcher(filename);
                if (matcher.find()){
                    serialNumber = (matcher.group(1));
                    while (locationID.equals("")){
                        try {
                            locationID = query.getLocationIdBySerialNumber(serialNumber);
                        } catch (dbQuery.NoLocationException ex) {
                            addSensor(serialNumber);
                        }
                    }
                }
                else{
                    throw new InvalidFilenameException();
                }
                //fin.reset();
                fin.nextLine();
                //fin.nextLine();
               
               while(fin.hasNext()){
                   // fin.nextLine();
                    
                    String rawline = fin.nextLine();
                    String [] line = rawline.split(",");
                    String timestamp = line[0];
                    double temp = Double.parseDouble(line[1]);
                    try{
                    query.insertTemperatureData(timestamp, temp, serialNumber, locationID);
                    }catch(SQLException ex){
                        continue;
                    }
                }
                //textArea.setText(buffer);
                fin.close();
                statusField.setText("Load " + chooser.getSelectedFile().getAbsolutePath());
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "File not found!");
            }
        }
        updateResults();
    }
    private void addSensor(){    
        JTextField fullName = new JTextField(5);
        JTextField abb = new JTextField(3);
        JTextField sensorSerialNumber = new JTextField(6);
        
        JPanel myPanel = new JPanel();
        myPanel.add(new JLabel("Location Name:"));
        myPanel.add(fullName);
        myPanel.add(new JLabel("Location abbreviation:"));
        myPanel.add(abb);
        myPanel.add(new JLabel("Sensor Serial Number:"));
        myPanel.add(sensorSerialNumber);
        int result = JOptionPane.showConfirmDialog(null, myPanel, 
               "Please fill out the form.", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            query.insertLocation(sensorSerialNumber.getText(),fullName.getText(), abb.getText());
      }
    }
    private void addSensor(String serialNumber){        
        JTextField fullName = new JTextField(5);
        JTextField abb = new JTextField(3);
        
        
        JPanel myPanel = new JPanel();
        myPanel.add(new JLabel("Location Name:"));
        myPanel.add(fullName);
        myPanel.add(new JLabel("Location abbreviation:"));
        myPanel.add(abb);
        int result = JOptionPane.showConfirmDialog(null, myPanel, 
               "Please fill out the form.", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            query.insertLocation(serialNumber,fullName.getText(), abb.getText());
        }
        updateResults();
    }
    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        try {                                             
            JFileChooser chooser = new JFileChooser();
            int chooserValue = chooser.showSaveDialog(this);
            if (chooserValue == JFileChooser.APPROVE_OPTION) {
         
           
                    statusField.setText("Saved " + chooser.getSelectedFile().getAbsolutePath());
                
               
            }
            Writer writer = null;
            DefaultTableModel dtm = (DefaultTableModel) rawTable.getModel();
            int nRow = dtm.getRowCount();
            int nCol = dtm.getColumnCount();
            try {
                writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(chooser.getSelectedFile().getAbsolutePath()+".csv"), "UTF-8"));
                
                //write the header information
                StringBuffer bufferHeader = new StringBuffer();
                for (int j = 0; j < nCol; j++) {
                    bufferHeader.append(dtm.getColumnName(j));
                    if (j!=nCol) bufferHeader.append(", ");
                }
                writer.write(bufferHeader.toString() + "\r\n");
                
                //write row information
                for (int i = 0 ; i < nRow ; i++){
                    StringBuffer buffer = new StringBuffer();
                    for (int j = 0 ; j < nCol ; j++){
                        buffer.append(dtm.getValueAt(i,j));
                        if (j!=nCol) buffer.append(", ");
                    }
                    writer.write(buffer.toString() + "\r\n");
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(dataPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(dataPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(dataPage.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            writer.close();
            JOptionPane.showMessageDialog(this, "File was Exported Correctly");
        } catch (IOException ex) {
            Logger.getLogger(dataPage.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_exportButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        addSensor();
        updateResults();
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        query.CLEAR();
        updateResults();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void averageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_averageTextFieldActionPerformed
        // TODO add your handling code here:
        
      // averageTextField.setText("12");
    }//GEN-LAST:event_averageTextFieldActionPerformed

    private void averageTextFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_averageTextFieldPropertyChange
        // TODO add your handling code here:
        averageTextField.setText("12");
        
       // averageTextField.setText("17");

    }//GEN-LAST:event_averageTextFieldPropertyChange
    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // textArea.setText("");
        // statusField.setText("New file");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField averageTextField;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton importButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private java.util.List<GUI.Location> locationList;
    private javax.persistence.Query locationQuery;
    private javax.swing.JLabel max;
    private javax.swing.JLabel min;
    private javax.swing.JLabel q1;
    private javax.swing.JLabel q2;
    private javax.swing.JLabel q3;
    private javax.swing.JPanel rawPanel2;
    private javax.swing.JTable rawTable;
    private javax.swing.JTextField statusField;
    private javax.swing.JLabel std;
    private javax.persistence.EntityManager tapPUEntityManager;
    // End of variables declaration//GEN-END:variables
    private TableModel results;
}
